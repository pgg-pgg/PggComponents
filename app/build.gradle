plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}
apply plugin: 'kotlin-kapt'
kapt {
    generateStubs = true
}

// 定义变量，可以定义变量，也可以不定义变量
def app_android = rootProject.ext.app_android;
def app_dependencies = rootProject.ext.app_dependencies;

android {
    compileSdk app_android.compileSdk

    defaultConfig {
        applicationId app_android.applicationId
        minSdk app_android.minSdk
        targetSdk app_android.targetSdk
        versionCode app_android.versionCode
        versionName app_android.versionName
        testInstrumentationRunner app_android.testInstrumentationRunner

        // 这个方法接收三个非空的参数，第一个：确定值的类型，第二个：指定key的名字，第三个：传值（必须是String）
        // 为什么需要定义这个？因为src代码中有可能需要用到跨模块交互，如果是组件化模块显然不行
        // 切记：不能在android根节点，只能在defaultConfig或buildTypes节点下
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))
        // 在gradle文件中配置选项参数值（用于APT传参接收）
        // 切记：必须写在defaultConfig节点下
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName(), packageNameForAPT: packageNameForAPT]
            }
        }
    }

    dataBinding{
        enabled = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    // 循环引入第三方库
    app_dependencies.each { k, v ->
        implementation v
    }
    //版本要与gradle版本一致
    "com.android.databinding:compiler:7.1.1"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // 公共基础库
    implementation project(":common")

    implementation project(":common:arouter_annotation")
    kapt project(":common:arouter_compiler")

    // 如果是集成化模式，做发布版本时。各个模块都不能独立运行了
    if (isRelease) {
        // 进if，集成，融为一体（order，personal）

        // 订单模块
        implementation project(":order")

        // 个人中心模块
        implementation project(":personal")
    }
}